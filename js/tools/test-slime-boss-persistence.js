// js/tools/test-slime-boss-persistence.js
// Script de test pour v√©rifier la persistance de l'√©tat du SlimeBoss

console.log('üß™ Test de persistance du SlimeBoss...');

// Fonction de test pour v√©rifier l'√©tat actuel
function testSlimeBossState() {
    console.log('üìä √âtat actuel du SlimeBoss:');
    console.log('- window.slimeBossDefeated:', window.slimeBossDefeated);
    console.log('- window.currentCharacterId:', window.currentCharacterId);
    console.log('- window.currentMap:', window.currentMap);
    
    // V√©rifier si le boss existe dans les monstres
    if (window.monsters) {
        const slimeBoss = window.monsters.find(m => m.type === 'slimeboss');
        console.log('- SlimeBoss dans les monstres:', slimeBoss ? 'Pr√©sent' : 'Absent');
        if (slimeBoss) {
            console.log('  - HP:', slimeBoss.hp, '/', slimeBoss.maxHp);
            console.log('  - isDead:', slimeBoss.isDead);
        }
    }
}

// Fonction pour simuler la d√©faite du boss
function simulateBossDefeat() {
    console.log('‚öîÔ∏è Simulation de la d√©faite du SlimeBoss...');
    
    // Marquer le boss comme vaincu
    window.slimeBossDefeated = true;
    
    // Supprimer le boss des monstres s'il existe
    if (window.monsters) {
        const bossIndex = window.monsters.findIndex(m => m.type === 'slimeboss');
        if (bossIndex !== -1) {
            window.monsters.splice(bossIndex, 1);
            console.log('‚úÖ SlimeBoss supprim√© des monstres');
        }
    }
    
    // Sauvegarder l'√©tat
    if (typeof window.saveGame === 'function') {
        window.saveGame();
        console.log('üíæ √âtat sauvegard√©');
    }
    
    testSlimeBossState();
}

// Fonction pour forcer le respawn du boss
function forceBossRespawn() {
    console.log('üîÑ For√ßage du respawn du SlimeBoss...');
    
    // R√©initialiser l'√©tat
    window.slimeBossDefeated = false;
    
    // Forcer la cr√©ation du boss
    if (typeof window.ensureSlimeBossExists === 'function') {
        window.ensureSlimeBossExists();
    }
    
    // Sauvegarder l'√©tat
    if (typeof window.saveGame === 'function') {
        window.saveGame();
        console.log('üíæ √âtat sauvegard√©');
    }
    
    testSlimeBossState();
}

// Fonction pour v√©rifier la sauvegarde dans localStorage
function checkLocalStorage() {
    console.log('üíæ V√©rification du localStorage...');
    
    if (window.currentCharacterId) {
        const saveKey = `monrpg_save_${window.currentCharacterId}`;
        const saveData = localStorage.getItem(saveKey);
        
        if (saveData) {
            try {
                const data = JSON.parse(saveData);
                console.log('- Donn√©es de sauvegarde trouv√©es');
                console.log('- gameState:', data.gameState);
                console.log('- slimeBossDefeated dans save:', data.gameState?.slimeBossDefeated);
            } catch (error) {
                console.error('‚ùå Erreur lors du parsing des donn√©es:', error);
            }
        } else {
            console.log('- Aucune sauvegarde trouv√©e');
        }
    } else {
        console.log('- Aucun personnage actif');
    }
}

// Exporter les fonctions de test
window.testSlimeBossState = testSlimeBossState;
window.simulateBossDefeat = simulateBossDefeat;
window.forceBossRespawn = forceBossRespawn;
window.checkLocalStorage = checkLocalStorage;

console.log('‚úÖ Script de test du SlimeBoss charg√©');
console.log('üìù Commandes disponibles:');
console.log('- testSlimeBossState() : V√©rifier l\'√©tat actuel');
console.log('- simulateBossDefeat() : Simuler la d√©faite du boss');
console.log('- forceBossRespawn() : Forcer le respawn du boss');
console.log('- checkLocalStorage() : V√©rifier les donn√©es sauvegard√©es'); 