// Syst√®me de collision - Core
// Nettoy√© et valid√© le 30/07/2025 - par Cursor

// GIDs bloquants - sera mis √† jour automatiquement selon la map
window.BLOCKED_GIDS = [];

// Fonction de diagnostic pour les collisions
window.diagnosisCollisions = function() {
    console.log("=== DIAGNOSTIC COLLISIONS ===");
    console.log("Map actuelle:", window.currentMap);
    console.log("mapData existe:", !!window.mapData);
    if (window.mapData) {
        console.log("Nombre de calques:", window.mapData.layers ? window.mapData.layers.length : "Pas de calques");
        if (window.mapData.layers) {
            const layer2 = window.mapData.layers.find(layer => layer.id === 2);
            console.log("Calque 2 trouv√©:", !!layer2);
            if (layer2) {
                console.log("Taille des donn√©es du calque 2:", layer2.data ? layer2.data.length : "Pas de donn√©es");
            }
        }
    }
    console.log("BLOCKED_GIDS:", window.BLOCKED_GIDS);
    console.log("Nombre de GIDs bloquants:", window.BLOCKED_GIDS.length);
    console.log("=============================");
};

// Fonction pour mettre √† jour les GIDs bloquants selon la map actuelle
window.updateBlockedGids = function() {
    // FORCER le nettoyage complet des collisions d'abord
    window.BLOCKED_GIDS = [];
    
    if (!window.mapData) {
        console.warn("updateBlockedGids: window.mapData n'existe pas");
        return;
    }
    
    if (!window.mapData.layers || window.mapData.layers.length === 0) {
        console.warn("updateBlockedGids: Pas de calques dans mapData");
        return;
    }
    
    // Trouver le calque 2 par son ID
    const layer2 = window.mapData.layers.find(layer => layer.id === 2);
    if (!layer2) {
        console.warn("updateBlockedGids: Calque 2 non trouv√© pour", window.currentMap);
        return;
    }
    
    if (!layer2.data || layer2.data.length === 0) {
        console.warn("updateBlockedGids: Pas de donn√©es dans le calque 2");
        return;
    }
    
    // R√©cup√©rer tous les GID non-nuls du calque 2
    const blockedGids = new Set();
    for (let i = 0; i < layer2.data.length; i++) {
        const gid = layer2.data[i];
        if (gid !== 0) {
            blockedGids.add(gid);
        }
    }
    
    window.BLOCKED_GIDS = Array.from(blockedGids);
    console.log(`Collisions mises √† jour pour ${window.currentMap}:`, window.BLOCKED_GIDS.length, "GIDs bloquants");
};

window.isBlocked = function(x, y) {
  if (!window.mapData) return false;
  if (x < 0 || y < 0 || x >= mapData.width || y >= mapData.height) {
    return true;
  }

  const idx = y * mapData.width + x;
  
  // Trouver le calque 2 par son ID
  const layer2 = mapData.layers.find(layer => layer.id === 2);
  if (!layer2) return false;
  
  const gid = layer2.data[idx];

  // V√©rifie collision statique
  if (window.BLOCKED_GIDS.includes(gid)) {
    return true;
  }

  // V√©rifie collision dynamique (joueur + monstres)
  if (typeof isOccupied === "function" && isOccupied(x, y)) {
    return true;
  }

  return false;
};

// Fonction de nettoyage forc√© des collisions
window.forceCleanCollisions = function() {
    console.log("NETTOYAGE FORC√â des collisions");
    window.BLOCKED_GIDS = [];
    
    // Forcer la mise √† jour des collisions apr√®s nettoyage
    if (window.mapData && typeof window.updateBlockedGids === "function") {
        setTimeout(() => {
            window.updateBlockedGids();
        }, 50); // Petit d√©lai pour s'assurer que mapData est bien d√©fini
    }
};

// Fonction pour v√©rifier et corriger les collisions incoh√©rentes
window.checkCollisionIntegrity = function() {
    if (!window.mapData || !window.currentMap) {
        console.log("Pas de map charg√©e, nettoyage des collisions");
        window.BLOCKED_GIDS = [];
        return;
    }
    
    const layer2 = window.mapData.layers ? window.mapData.layers.find(layer => layer.id === 2) : null;
    if (!layer2) {
        console.log("Pas de calque de collision trouv√©, nettoyage des collisions");
        window.BLOCKED_GIDS = [];
        return;
    }
    
    console.log("Int√©grit√© des collisions v√©rifi√©e pour", window.currentMap);
};

// FONCTION D'URGENCE : √Ä utiliser quand les collisions fant√¥mes apparaissent
window.fixCollisionGhosts = function() {
    console.log("üö® CORRECTION D'URGENCE DES COLLISIONS FANT√îMES üö®");
    
    // √âtape 1 : Diagnostic complet
    console.log("Avant correction:");
    if (typeof window.diagnosisCollisions === "function") {
        window.diagnosisCollisions();
    }
    
    // √âtape 2 : Nettoyage brutal de toutes les collisions
    window.BLOCKED_GIDS = [];
    
    // √âtape 3 : Forcer la mise √† jour imm√©diate
    if (window.mapData && window.currentMap) {
        console.log("Rechargement des collisions pour", window.currentMap);
        
        // V√©rifier que la map a bien un calque de collision
        const layer2 = window.mapData.layers ? window.mapData.layers.find(layer => layer.id === 2) : null;
        if (layer2 && layer2.data) {
            // Reconstruire manuellement les collisions
            const blockedGids = new Set();
            for (let i = 0; i < layer2.data.length; i++) {
                const gid = layer2.data[i];
                if (gid !== 0) {
                    blockedGids.add(gid);
                }
            }
            window.BLOCKED_GIDS = Array.from(blockedGids);
            console.log("‚úÖ Collisions reconstruites:", window.BLOCKED_GIDS.length, "GIDs bloquants");
        } else {
            console.log("‚ùå Pas de calque de collision trouv√© - collisions vides");
        }
    } else {
        console.log("‚ùå Pas de map charg√©e - collisions vides");
    }
    
    // √âtape 4 : Diagnostic apr√®s correction
    console.log("Apr√®s correction:");
    if (typeof window.diagnosisCollisions === "function") {
        window.diagnosisCollisions();
    }
    
    // √âtape 5 : Forcer le redessin de la map pour voir l'effet imm√©diatement
    if (typeof drawMap === "function") {
        drawMap();
    }
    
    console.log("üéâ CORRECTION TERMIN√âE ! Les collisions fant√¥mes devraient √™tre supprim√©es.");
    console.log("üí° Si le probl√®me persiste, tape 'window.diagnosisCollisions()' pour plus d'infos.");
};