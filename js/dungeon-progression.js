// js/dungeon-progression.js
// Syst√®me de progression du donjon slime

// √âtat de la progression du donjon
window.dungeonProgression = {
    mapdonjonslime: {
        slimesKilled: 0,
        totalSlimes: 5,
        portalUnlocked: false,
        slimesSpawned: 0 // Nouveau: compter les slimes cr√©√©s
    },
    mapdonjonslime2: {
        slimesKilled: 0,
        totalSlimes: 7,
        decorRemoved: false,
        slimesSpawned: 0
    }
};

// FONCTION RADICALE : R√©initialiser la progression √† chaque entr√©e dans le donjon
window.resetDungeonProgressionOnEntry = function() {
    console.log("üîÑ R√âINITIALISATION RADICALE de la progression du donjon !");
    console.log("‚ö†Ô∏è Chaque entr√©e dans le donjon force le joueur √† refaire toutes les √©tapes");
    
    // Remettre √† z√©ro tous les compteurs pour mapdonjonslime
    window.dungeonProgression.mapdonjonslime.slimesKilled = 0;
    window.dungeonProgression.mapdonjonslime.slimesSpawned = 0;
    window.dungeonProgression.mapdonjonslime.portalUnlocked = false;
    
    // Remettre √† z√©ro tous les compteurs pour mapdonjonslime2
    window.dungeonProgression.mapdonjonslime2.slimesKilled = 0;
    window.dungeonProgression.mapdonjonslime2.slimesSpawned = 0;
    window.dungeonProgression.mapdonjonslime2.decorRemoved = false;
    
    // NETTOYER les donn√©es des monstres du donjon pour forcer le respawn
    if (typeof window.clearMonsterDataForMap === "function") {
        window.clearMonsterDataForMap("mapdonjonslime");
        window.clearMonsterDataForMap("mapdonjonslime2");
        console.log("üßπ Donn√©es des monstres du donjon nettoy√©es - respawn forc√©");
    }
    
    // FORCER le nettoyage des donn√©es du donjon dans localStorage
    try {
        const savedData = localStorage.getItem('monsterSaves');
        if (savedData) {
            const allSaves = JSON.parse(savedData);
            if (allSaves.mapdonjonslime) {
                delete allSaves.mapdonjonslime;
                localStorage.setItem('monsterSaves', JSON.stringify(allSaves));
                console.log("üóëÔ∏è Donn√©es mapdonjonslime supprim√©es du localStorage");
            }
            if (allSaves.mapdonjonslime2) {
                delete allSaves.mapdonjonslime2;
                localStorage.setItem('monsterSaves', JSON.stringify(allSaves));
                console.log("üóëÔ∏è Donn√©es mapdonjonslime2 supprim√©es du localStorage");
            }
        }
    } catch (error) {
        console.error('Erreur lors du nettoyage localStorage:', error);
    }
    
    console.log("‚úÖ Progression r√©initialis√©e : 0/5 slimes tu√©s sur mapdonjonslime, 0/7 slimes tu√©s sur mapdonjonslime2");
    console.log("üìä Nouvel √©tat:", window.dungeonProgression);
};

// Fonction appel√©e quand un slime est cr√©√©
window.onSlimeSpawned = function() {
    if (window.currentMap === "mapdonjonslime") {
        window.dungeonProgression.mapdonjonslime.slimesSpawned++;
        console.log(`üê∏ Slime cr√©√© sur mapdonjonslime. Total cr√©√©s: ${window.dungeonProgression.mapdonjonslime.slimesSpawned}`);
    } else if (window.currentMap === "mapdonjonslime2") {
        window.dungeonProgression.mapdonjonslime2.slimesSpawned++;
        console.log(`üê∏ Slime cr√©√© sur mapdonjonslime2. Total cr√©√©s: ${window.dungeonProgression.mapdonjonslime2.slimesSpawned}`);
    }
};

// Fonction appel√©e quand un slime est tu√©
window.onSlimeKilled = function() {
    if (window.currentMap === "mapdonjonslime") {
        window.dungeonProgression.mapdonjonslime.slimesKilled++;
        console.log(`üó°Ô∏è Slime tu√© sur mapdonjonslime. Total tu√©s: ${window.dungeonProgression.mapdonjonslime.slimesKilled}`);
        
        // V√©rifier si on peut d√©bloquer le portail
        if (window.dungeonProgression.mapdonjonslime.slimesKilled >= 5 && !window.dungeonProgression.mapdonjonslime.portalUnlocked) {
            window.dungeonProgression.mapdonjonslime.portalUnlocked = true;
            console.log("üö™ Portail 12008 d√©bloqu√© ! Vous pouvez maintenant acc√©der √† mapdonjonslime2");
        }
    } else if (window.currentMap === "mapdonjonslime2") {
        window.dungeonProgression.mapdonjonslime2.slimesKilled++;
        console.log(`üó°Ô∏è Slime tu√© sur mapdonjonslime2. Total tu√©s: ${window.dungeonProgression.mapdonjonslime2.slimesKilled}`);
        
        // V√©rifier si on peut retirer le d√©cor
        if (window.dungeonProgression.mapdonjonslime2.slimesKilled >= 7 && !window.dungeonProgression.mapdonjonslime2.decorRemoved) {
            window.dungeonProgression.mapdonjonslime2.decorRemoved = true;
            console.log("üèóÔ∏è D√©cor retir√© ! Les portails 15408 et 15608 sont maintenant accessibles");
            // Appeler la fonction pour retirer le d√©cor
            window.removeMapdonjonslime2Decor();
        }
    }
};

// Fonction appel√©e quand un slime est tu√©
window.checkDungeonProgression = function() {
    const currentMap = window.currentMap;
    
    if (currentMap === "mapdonjonslime") {
        checkMapdonjonslimeProgression();
    } else if (currentMap === "mapdonjonslime2") {
        checkMapdonjonslime2Progression();
    }
};

// V√©rifier la progression sur mapdonjonslime
function checkMapdonjonslimeProgression() {
    // Utiliser les compteurs sauvegard√©s au lieu de compter dans le tableau monsters
    const slimesKilled = window.dungeonProgression.mapdonjonslime.slimesKilled;
    const slimesSpawned = window.dungeonProgression.mapdonjonslime.slimesSpawned;
    
    console.log(`üó°Ô∏è Progression mapdonjonslime: ${slimesKilled}/${slimesSpawned} slimes tu√©s`);
    
    // D√©bloquer le portail si tous les slimes sont tu√©s
    if (slimesKilled >= 5 && !window.dungeonProgression.mapdonjonslime.portalUnlocked) {
        window.dungeonProgression.mapdonjonslime.portalUnlocked = true;
        console.log("üö™ Portail 12008 d√©bloqu√© ! Vous pouvez maintenant acc√©der √† mapdonjonslime2");
    }
}

// V√©rifier la progression sur mapdonjonslime2
function checkMapdonjonslime2Progression() {
    // Utiliser les compteurs sauvegard√©s au lieu de compter dans le tableau monsters
    const slimesKilled = window.dungeonProgression.mapdonjonslime2.slimesKilled;
    const slimesSpawned = window.dungeonProgression.mapdonjonslime2.slimesSpawned;
    
    console.log(`üó°Ô∏è Progression mapdonjonslime2: ${slimesKilled}/${slimesSpawned} slimes tu√©s`);
    
    // Retirer le d√©cor si tous les slimes sont tu√©s
    if (slimesKilled >= 7 && !window.dungeonProgression.mapdonjonslime2.decorRemoved) {
        window.dungeonProgression.mapdonjonslime2.decorRemoved = true;
        console.log("üèóÔ∏è D√©cor retir√© ! Les portails 15408 et 15608 sont maintenant accessibles");
        // Appeler la fonction pour retirer le d√©cor
        window.removeMapdonjonslime2Decor();
    }
}

// Fonction pour retirer le d√©cor de mapdonjonslime2 (tiles 17408 et 17608)
window.removeMapdonjonslime2Decor = function() {
    console.log("üèóÔ∏è Suppression du d√©cor de mapdonjonslime2...");
    
    // V√©rifier si on est sur la bonne map
    if (window.currentMap !== "mapdonjonslime2") {
        console.log("‚ùå Erreur: On n'est pas sur mapdonjonslime2");
        return;
    }
    
    // Fonction interne pour effectuer la suppression
    const performRemoval = () => {
        // V√©rifier si la map est charg√©e (utiliser window.mapData au lieu de window.currentMapData)
        if (!window.mapData || !window.mapData.layers) {
            console.log("‚ùå Erreur: Donn√©es de map non disponibles");
            console.log("mapData:", window.mapData);
            return false;
        }
        
        console.log("üîç Recherche de la couche 2 (d√©cor)...");
        console.log("Layers disponibles:", window.mapData.layers.map(l => ({ id: l.id, name: l.name })));
        
        // Trouver la couche 2 (d√©cor) - utiliser l'index 1 car les couches commencent √† 0
        const decorLayer = window.mapData.layers[1]; // Couche 2 = index 1
        if (!decorLayer || !decorLayer.data) {
            console.log("‚ùå Erreur: Couche d√©cor non trouv√©e");
            console.log("Couches disponibles:", window.mapData.layers);
            return false;
        }
        
        console.log("‚úÖ Couche d√©cor trouv√©e:", decorLayer.name, "ID:", decorLayer.id);
        console.log("üìä Taille des donn√©es:", decorLayer.data.length);
        
        // Supprimer les tiles 17408 et 17608
        let tilesRemoved = 0;
        for (let i = 0; i < decorLayer.data.length; i++) {
            if (decorLayer.data[i] === 17408 || decorLayer.data[i] === 17608) {
                console.log(`üóëÔ∏è Suppression du tile ${decorLayer.data[i]} √† l'index ${i}`);
                decorLayer.data[i] = 0; // Remplacer par un tile vide
                tilesRemoved++;
            }
        }
        
        console.log(`‚úÖ ${tilesRemoved} tiles de d√©cor supprim√©s (17408 et 17608)`);
        console.log("üö™ Les portails 15408 et 15608 sont maintenant accessibles !");
        
        // Forcer le redessinage de la map
        if (typeof window.redrawMap === "function") {
            window.redrawMap();
            console.log("üîÑ Redessinage de la map effectu√©");
        } else {
            console.log("‚ö†Ô∏è Fonction redrawMap non disponible");
        }
        
        return true;
    };
    
    // Essayer imm√©diatement
    if (performRemoval()) {
        return;
    }
    
    // Si √ßa ne marche pas, attendre un peu et r√©essayer
    console.log("‚è≥ Attente des donn√©es de map...");
    setTimeout(() => {
        if (performRemoval()) {
            return;
        }
        
        // Si √ßa ne marche toujours pas, attendre encore plus longtemps
        console.log("‚è≥ Attente plus longue des donn√©es de map...");
        setTimeout(() => {
            if (performRemoval()) {
                return;
            }
            
            console.log("‚ùå Impossible de supprimer le d√©cor - donn√©es de map non disponibles");
        }, 2000);
    }, 500);
};

// Fonction pour forcer la v√©rification de la progression (accessible depuis la console)
window.forceCheckDungeonProgression = function() {
    console.log("üîç V√©rification forc√©e de la progression du donjon...");
    checkMapdonjonslimeProgression();
    
    // Afficher l'√©tat actuel
    console.log("üìä √âtat actuel:", window.dungeonProgression);
    console.log("üö™ Portail 12008 accessible:", window.isPortal12008Accessible());
};

// Fonction pour d√©bloquer manuellement le portail (accessible depuis la console)
window.unlockPortal12008 = function() {
    window.dungeonProgression.mapdonjonslime.portalUnlocked = true;
    window.dungeonProgression.mapdonjonslime.slimesKilled = 5;
    console.log("üîì Portail 12008 d√©bloqu√© manuellement !");
    console.log("üìä √âtat actuel:", window.dungeonProgression);
};

// Fonction pour forcer le d√©blocage si tous les slimes sont morts (solution automatique)
window.forceUnlockIfAllSlimesDead = function() {
    console.log("üîç V√©rification automatique des slimes morts...");
    
    let aliveSlimes = 0;
    
    if (typeof window.monsters !== 'undefined') {
        window.monsters.forEach(monster => {
            if (monster && monster.type === "slime" && !monster.isDead && monster.hp > 0) {
                aliveSlimes++;
            }
        });
    }
    
    const slimesKilled = window.dungeonProgression.mapdonjonslime.slimesKilled;
    const slimesSpawned = window.dungeonProgression.mapdonjonslime.slimesSpawned;
    
    console.log(`üìä Slimes cr√©√©s: ${slimesSpawned}, Slimes tu√©s: ${slimesKilled}, Slimes vivants: ${aliveSlimes}`);
    
    // Si il n'y a plus de slimes vivants et qu'on a tu√© au moins 5 slimes, d√©bloquer le portail
    if (aliveSlimes === 0 && slimesKilled >= 5) {
        window.dungeonProgression.mapdonjonslime.portalUnlocked = true;
        console.log("üîì Portail 12008 d√©bloqu√© automatiquement ! Tous les slimes sont morts.");
        console.log("üìä √âtat actuel:", window.dungeonProgression);
        return true;
    }
    
    return false;
};

// Fonction pour v√©rifier si le portail 12008 est accessible
window.isPortal12008Accessible = function() {
    return window.dungeonProgression.mapdonjonslime.portalUnlocked;
};

// Sauvegarder la progression
window.saveDungeonProgression = function() {
    return window.dungeonProgression;
};

// Charger la progression
window.loadDungeonProgression = function(data) {
    if (data) {
        window.dungeonProgression = data;
        console.log("üìÅ Progression du donjon charg√©e:", window.dungeonProgression);
    }
};

// V√©rifier automatiquement la progression au chargement de la map
window.checkDungeonProgressionOnMapLoad = function() {
    if (window.currentMap === "mapdonjonslime") {
        // SOLUTION RADICALE : R√©initialiser la progression √† chaque entr√©e dans le donjon
        window.resetDungeonProgressionOnEntry();
        
        // Attendre un peu que les monstres soient charg√©s
        setTimeout(() => {
            checkMapdonjonslimeProgression();
            
            // FORCER le respawn des monstres apr√®s le nettoyage
            if (typeof window.loadMonstersForMap === "function") {
                setTimeout(() => {
                    window.loadMonstersForMap("mapdonjonslime");
                    console.log("üîÑ Respawning forc√© des monstres du donjon");
                }, 500);
            }
        }, 1000);
    } else if (window.currentMap === "mapdonjonslime2") {
        // SOLUTION RADICALE : R√©initialiser la progression √† chaque entr√©e dans le donjon
        window.resetDungeonProgressionOnEntry();
        
        // Attendre un peu que les monstres soient charg√©s
        setTimeout(() => {
            checkMapdonjonslime2Progression();
            
            // FORCER le respawn des monstres apr√®s le nettoyage
            if (typeof window.loadMonstersForMap === "function") {
                setTimeout(() => {
                    window.loadMonstersForMap("mapdonjonslime2");
                    console.log("üîÑ Respawning forc√© des monstres du donjon niveau 2");
                }, 500);
            }
        }, 1000);
    }
};

// Fonction pour corriger l'√©tat actuel (solution pour les slimes d√©j√† tu√©s)
window.fixCurrentDungeonState = function() {
    console.log("üîß Correction de l'√©tat actuel du donjon...");
    
    // Si on est sur mapdonjonslime et qu'il n'y a plus de slimes vivants
    if (window.currentMap === "mapdonjonslime") {
        let aliveSlimes = 0;
        
        if (typeof window.monsters !== 'undefined') {
            window.monsters.forEach(monster => {
                if (monster && monster.type === "slime" && !monster.isDead && monster.hp > 0) {
                    aliveSlimes++;
                }
            });
        }
        
        // Si il n'y a plus de slimes vivants, on suppose que tous les 5 slimes ont √©t√© tu√©s
        if (aliveSlimes === 0) {
            window.dungeonProgression.mapdonjonslime.slimesSpawned = 5;
            window.dungeonProgression.mapdonjonslime.slimesKilled = 5;
            window.dungeonProgression.mapdonjonslime.portalUnlocked = true;
            
            console.log("üîß √âtat corrig√©: 5 slimes cr√©√©s, 5 slimes tu√©s, portail d√©bloqu√©");
            console.log("üìä √âtat actuel:", window.dungeonProgression);
            return true;
        }
    }
    
    return false;
};

// Fonction pour forcer le retrait du d√©cor de mapdonjonslime2 (accessible depuis la console)
window.forceRemoveMapdonjonslime2Decor = function() {
    console.log("üîß For√ßage du retrait du d√©cor de mapdonjonslime2...");
    
    // Marquer le d√©cor comme retir√©
    window.dungeonProgression.mapdonjonslime2.decorRemoved = true;
    
    // Appeler la fonction de retrait
    window.removeMapdonjonslime2Decor();
    
    console.log("‚úÖ D√©cor forc√©ment retir√© de mapdonjonslime2");
};

// Fonction alternative pour supprimer le d√©cor en rechargeant la map
window.forceRemoveMapdonjonslime2DecorAlternative = function() {
    console.log("üîß M√©thode alternative: Suppression du d√©cor de mapdonjonslime2...");
    
    if (window.currentMap !== "mapdonjonslime2") {
        console.log("‚ùå Erreur: On n'est pas sur mapdonjonslime2");
        return;
    }
    
    // Marquer le d√©cor comme retir√©
    window.dungeonProgression.mapdonjonslime2.decorRemoved = true;
    
    // Forcer le rechargement de la map avec les modifications
    if (typeof window.loadMap === "function") {
        console.log("üîÑ Rechargement de la map avec modifications...");
        
        // Sauvegarder la position actuelle du joueur
        const playerX = window.player ? window.player.x : 0;
        const playerY = window.player ? window.player.y : 0;
        
        // Recharger la map
        window.loadMap("mapdonjonslime2");
        
        // Restaurer la position du joueur
        setTimeout(() => {
            if (window.player) {
                window.player.x = playerX;
                window.player.y = playerY;
                window.player.px = playerX * (window.TILE_SIZE || 32);
                window.player.py = playerY * (window.TILE_SIZE || 32);
            }
            
            // Appliquer les modifications apr√®s le rechargement
            setTimeout(() => {
                window.removeMapdonjonslime2Decor();
            }, 1000);
        }, 500);
    } else {
        console.log("‚ùå Fonction loadMap non disponible");
    }
};

// Fonction de debug pour v√©rifier la pr√©sence des tiles 17408 et 17608
window.debugMapdonjonslime2Tiles = function() {
    console.log("üîç DEBUG: V√©rification des tiles 17408 et 17608 sur mapdonjonslime2...");
    
    if (window.currentMap !== "mapdonjonslime2") {
        console.log("‚ùå Erreur: On n'est pas sur mapdonjonslime2");
        return;
    }
    
    if (!window.mapData || !window.mapData.layers) {
        console.log("‚ùå Erreur: Donn√©es de map non disponibles");
        return;
    }
    
    const decorLayer = window.mapData.layers[1]; // Couche 2
    if (!decorLayer || !decorLayer.data) {
        console.log("‚ùå Erreur: Couche d√©cor non trouv√©e");
        return;
    }
    
    let tile17408Count = 0;
    let tile17608Count = 0;
    let tile17408Positions = [];
    let tile17608Positions = [];
    
    for (let i = 0; i < decorLayer.data.length; i++) {
        if (decorLayer.data[i] === 17408) {
            tile17408Count++;
            const x = i % 25; // Largeur de la map
            const y = Math.floor(i / 25); // Hauteur de la map
            tile17408Positions.push({ x, y, index: i });
        }
        if (decorLayer.data[i] === 17608) {
            tile17608Count++;
            const x = i % 25; // Largeur de la map
            const y = Math.floor(i / 25); // Hauteur de la map
            tile17608Positions.push({ x, y, index: i });
        }
    }
    
    console.log(`üìä R√©sultats:`);
    console.log(`- Tile 17408: ${tile17408Count} occurrences`);
    console.log(`- Tile 17608: ${tile17608Count} occurrences`);
    
    if (tile17408Positions.length > 0) {
        console.log(`üìç Positions du tile 17408:`, tile17408Positions);
    }
    if (tile17608Positions.length > 0) {
        console.log(`üìç Positions du tile 17608:`, tile17608Positions);
    }
    
    if (tile17408Count === 0 && tile17608Count === 0) {
        console.log("‚úÖ Les tiles 17408 et 17608 ont d√©j√† √©t√© supprim√©s !");
    }
};

console.log("üó∫Ô∏è Syst√®me de progression du donjon slime charg√©");
console.log("üîÑ SYST√àME RADICAL ACTIV√â : La progression se r√©initialise √† chaque entr√©e dans le donjon");
console.log("üîß Commandes disponibles:");
console.log("resetDungeonProgressionOnEntry() - R√©initialiser manuellement la progression");
console.log("fixCurrentDungeonState() - Corriger l'√©tat actuel (pour les slimes d√©j√† tu√©s)");
console.log("forceCheckDungeonProgression() - V√©rifier la progression");
console.log("forceUnlockIfAllSlimesDead() - D√©bloquer automatiquement si tous les slimes sont morts");
console.log("unlockPortal12008() - D√©bloquer manuellement le portail");
console.log("removeMapdonjonslime2Decor() - Retirer manuellement le d√©cor de mapdonjonslime2");
console.log("forceRemoveMapdonjonslime2Decor() - Forcer le retrait du d√©cor de mapdonjonslime2");
console.log("forceRemoveMapdonjonslime2DecorAlternative() - M√©thode alternative pour retirer le d√©cor");
console.log("debugMapdonjonslime2Tiles() - Debug: v√©rifier la pr√©sence des tiles 17408 et 17608"); 