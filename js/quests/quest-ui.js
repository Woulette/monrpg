// js/quests/quest-ui.js - Interface utilisateur des qu√™tes

// Afficher l'offre de qu√™te
function showQuestOffer() {
    const quest = getCurrentQuests().crowHunt;
    
    // Cr√©er la fen√™tre de qu√™te
    let questModal = document.getElementById('quest-offer-modal');
    if (!questModal) {
        questModal = document.createElement('div');
        questModal.id = 'quest-offer-modal';
        questModal.className = 'quest-modal';
        
        const questContent = document.createElement('div');
        questContent.className = 'quest-content';
        
        const questTitle = document.createElement('h2');
        questTitle.textContent = 'üéØ Qu√™te Disponible';
        questTitle.className = 'quest-title';
        
        const questName = document.createElement('h3');
        questName.textContent = quest.name;
        questName.className = 'quest-name';
        
        const questDesc = document.createElement('p');
        questDesc.textContent = quest.description;
        questDesc.className = 'quest-description';
        
        const questReward = document.createElement('div');
        questReward.className = 'quest-reward';
        
        // Cr√©er l'affichage avec les images
        questReward.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong>R√©compenses:</strong>
            </div>
            <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                <div style="display: flex; align-items: center; gap: 5px;">
                    ‚≠ê ${quest.reward.xp} XP
                </div>
                <div style="display: flex; align-items: center; gap: 5px;">
                    üí∞ ${quest.reward.pecka} Pecka
                </div>
                ${quest.reward.items ? quest.reward.items.map(item => `
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <img src="assets/objets/${item.id.replace('_', 'de')}.png" alt="${item.name}" style="width: 20px; height: 20px;">
                        <span>${item.quantity}x ${item.name}</span>
                    </div>
                `).join('') : ''}
            </div>
        `;
        
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'quest-button-container';
        
        const acceptButton = document.createElement('button');
        acceptButton.textContent = 'Accepter';
        acceptButton.className = 'quest-accept-btn';
        acceptButton.onclick = function() {
            acceptQuest(quest.id);
            questModal.remove();
        };
        
        const declineButton = document.createElement('button');
        declineButton.textContent = 'Refuser';
        declineButton.className = 'quest-decline-btn';
        declineButton.onclick = function() {
            questModal.remove();
            if (typeof window.hidePNJDialogModal === 'function') {
                window.hidePNJDialogModal();
            }
        };
        
        buttonContainer.appendChild(acceptButton);
        buttonContainer.appendChild(declineButton);
        
        questContent.appendChild(questTitle);
        questContent.appendChild(questName);
        questContent.appendChild(questDesc);
        questContent.appendChild(questReward);
        questContent.appendChild(buttonContainer);
        
        questModal.appendChild(questContent);
        document.body.appendChild(questModal);
    }
}

// Afficher l'offre de qu√™te de craft
function showCraftQuestOffer() {
    const quest = getCurrentQuests().crowCraft;
    
    // Cr√©er la fen√™tre de qu√™te
    let questModal = document.getElementById('craft-quest-offer-modal');
    if (!questModal) {
        questModal = document.createElement('div');
        questModal.id = 'craft-quest-offer-modal';
        questModal.className = 'quest-modal';
        
        const questContent = document.createElement('div');
        questContent.className = 'quest-content';
        
        const questTitle = document.createElement('h2');
        questTitle.textContent = 'üéØ Nouvelle Qu√™te Disponible';
        questTitle.className = 'quest-title';
        
        const questName = document.createElement('h3');
        questName.textContent = quest.name;
        questName.className = 'quest-name';
        
        const questDesc = document.createElement('p');
        questDesc.textContent = quest.description;
        questDesc.className = 'quest-description';
        
        // Afficher les objets requis
        const requiredItemsDiv = document.createElement('div');
        requiredItemsDiv.className = 'quest-required-items';
        requiredItemsDiv.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong>Objets requis:</strong>
            </div>
            <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                ${quest.requiredItems.map(item => `
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <img src="${getQuestItemImagePath(item.id)}" 
                             style="width: 20px; height: 20px; vertical-align: middle;" 
                             onerror="this.style.display='none'">
                        ${item.quantity}x ${item.name}
                    </div>
                `).join('')}
            </div>
        `;
        
        const questReward = document.createElement('div');
        questReward.className = 'quest-reward';
        
        // Cr√©er l'affichage avec les images
        questReward.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong>R√©compenses:</strong>
            </div>
            <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                <div style="display: flex; align-items: center; gap: 5px;">
                    ‚≠ê ${quest.reward.xp} XP
                </div>
                <div style="display: flex; align-items: center; gap: 5px;">
                    üí∞ ${quest.reward.pecka} Pecka
                </div>
                ${quest.reward.items ? quest.reward.items.map(item => `
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <img src="assets/objets/${item.id}.png" 
                             style="width: 20px; height: 20px; vertical-align: middle;" 
                             onerror="this.style.display='none'">
                        ${item.quantity}x ${item.name}
                    </div>
                `).join('') : ''}
            </div>
        `;
        
        // Boutons
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'quest-buttons';
        
        const acceptButton = document.createElement('button');
        acceptButton.textContent = 'Accepter';
        acceptButton.className = 'quest-accept-btn';
        acceptButton.onclick = function() {
            acceptQuest('crowCraft');
            document.body.removeChild(questModal);
        };
        
        const declineButton = document.createElement('button');
        declineButton.textContent = 'Refuser';
        declineButton.className = 'quest-decline-btn';
        declineButton.onclick = function() {
            document.body.removeChild(questModal);
        };
        
        buttonContainer.appendChild(acceptButton);
        buttonContainer.appendChild(declineButton);
        
        questContent.appendChild(questTitle);
        questContent.appendChild(questName);
        questContent.appendChild(questDesc);
        questContent.appendChild(requiredItemsDiv);
        questContent.appendChild(questReward);
        questContent.appendChild(buttonContainer);
        
        questModal.appendChild(questContent);
        document.body.appendChild(questModal);
    }
}

// Afficher l'offre de qu√™te du boss slime
function showSlimeBossQuestOffer() {
    const quest = getCurrentQuests().slimeBoss;
    
    if (!quest) {
        return;
    }
    
    // Cr√©er la fen√™tre de qu√™te
    let questModal = document.getElementById('slime-boss-quest-offer-modal');
    if (!questModal) {
        questModal = document.createElement('div');
        questModal.id = 'slime-boss-quest-offer-modal';
        questModal.className = 'quest-modal';
        
        const questContent = document.createElement('div');
        questContent.className = 'quest-content';
        
        const questTitle = document.createElement('h2');
        questTitle.textContent = 'üéØ Nouvelle Qu√™te Disponible';
        questTitle.className = 'quest-title';
        
        const questName = document.createElement('h3');
        questName.textContent = quest.name;
        questName.className = 'quest-name';
        
        const questDesc = document.createElement('p');
        questDesc.textContent = quest.description;
        questDesc.className = 'quest-description';
        
        // Afficher les objets requis
        const requiredItemsDiv = document.createElement('div');
        requiredItemsDiv.className = 'quest-required-items';
        requiredItemsDiv.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong>Objets requis:</strong>
            </div>
            <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                ${quest.requiredItems.map(item => `
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <img src="${getQuestItemImagePath(item.id)}" 
                             style="width: 20px; height: 20px; vertical-align: middle;" 
                             onerror="this.style.display='none'">
                        ${item.quantity}x ${item.name}
                    </div>
                `).join('')}
            </div>
        `;
        
        const questReward = document.createElement('div');
        questReward.className = 'quest-reward';
        
        // Cr√©er l'affichage avec les images
        questReward.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong>R√©compenses:</strong>
            </div>
            <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                <div style="display: flex; align-items: center; gap: 5px;">
                    ‚≠ê ${quest.reward.xp} XP
                </div>
                <div style="display: flex; align-items: center; gap: 5px;">
                    üí∞ ${quest.reward.pecka} Pecka
                </div>
            </div>
        `;
        
        // Boutons
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'quest-buttons';
        
        const acceptButton = document.createElement('button');
        acceptButton.textContent = 'Accepter';
        acceptButton.className = 'quest-accept-btn';
        acceptButton.onclick = function() {
            acceptQuest('slimeBoss');
            document.body.removeChild(questModal);
        };
        
        const declineButton = document.createElement('button');
        declineButton.textContent = 'Refuser';
        declineButton.className = 'quest-decline-btn';
        declineButton.onclick = function() {
            document.body.removeChild(questModal);
        };
        
        buttonContainer.appendChild(acceptButton);
        buttonContainer.appendChild(declineButton);
        
        questContent.appendChild(questTitle);
        questContent.appendChild(questName);
        questContent.appendChild(questDesc);
        questContent.appendChild(requiredItemsDiv);
        questContent.appendChild(questReward);
        questContent.appendChild(buttonContainer);
        
        questModal.appendChild(questContent);
        document.body.appendChild(questModal);
    }
}

// Afficher l'offre de qu√™te finale du SlimeBoss
function showSlimeBossFinalQuestOffer() {
    const quest = getCurrentQuests().slimeBossFinal;
    
    // Cr√©er la fen√™tre de qu√™te
    let questModal = document.getElementById('slime-boss-final-quest-offer-modal');
    if (!questModal) {
        questModal = document.createElement('div');
        questModal.id = 'slime-boss-final-quest-offer-modal';
        questModal.className = 'quest-modal';
        
        const questContent = document.createElement('div');
        questContent.className = 'quest-content';
        
        const questTitle = document.createElement('h2');
        questTitle.textContent = 'üéØ Qu√™te Finale Disponible';
        questTitle.className = 'quest-title';
        
        const questName = document.createElement('h3');
        questName.textContent = quest.name;
        questName.className = 'quest-name';
        
        const questDesc = document.createElement('p');
        questDesc.textContent = quest.description;
        questDesc.className = 'quest-description';
        
        const questReward = document.createElement('div');
        questReward.className = 'quest-reward';
        
        // Cr√©er l'affichage avec les images
        questReward.innerHTML = `
            <div style="margin-bottom: 10px;">
                <strong>R√©compenses:</strong>
            </div>
            <div style="display: flex; align-items: center; gap: 15px; flex-wrap: wrap;">
                <div style="display: flex; align-items: center; gap: 5px;">
                    ‚≠ê ${quest.reward.xp} XP
                </div>
                <div style="display: flex; align-items: center; gap: 5px;">
                    üí∞ ${quest.reward.pecka} Pecka
                </div>
                ${quest.reward.items ? quest.reward.items.map(item => `
                    <div style="display: flex; align-items: center; gap: 5px;">
                        <img src="${getQuestItemImagePath(item.id)}" 
                             style="width: 20px; height: 20px; vertical-align: middle;" 
                             onerror="this.style.display='none'">
                        ${item.quantity}x ${item.name}
                    </div>
                `).join('') : ''}
            </div>
        `;
        
        // Boutons
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'quest-buttons';
        
        const acceptButton = document.createElement('button');
        acceptButton.textContent = 'Accepter';
        acceptButton.className = 'quest-accept-btn';
        acceptButton.onclick = function() {
            acceptQuest('slimeBossFinal');
            document.body.removeChild(questModal);
        };
        
        const declineButton = document.createElement('button');
        declineButton.textContent = 'Refuser';
        declineButton.className = 'quest-decline-btn';
        declineButton.onclick = function() {
            document.body.removeChild(questModal);
        };
        
        buttonContainer.appendChild(acceptButton);
        buttonContainer.appendChild(declineButton);
        
        questContent.appendChild(questTitle);
        questContent.appendChild(questName);
        questContent.appendChild(questDesc);
        questContent.appendChild(questReward);
        questContent.appendChild(buttonContainer);
        
        questModal.appendChild(questContent);
        document.body.appendChild(questModal);
    }
}

// ===== NOUVELLES FONCTIONS POUR LA FEN√äTRE PRINCIPALE =====

// Variable pour l'onglet actif
let currentQuestTab = 'all';

// Initialiser la fen√™tre des qu√™tes
function initQuestsWindow() {
    // Ajouter l'√©v√©nement de clic sur l'ic√¥ne des qu√™tes
    const quetesIcon = document.getElementById('quetes-icon');
    if (quetesIcon) {
        quetesIcon.addEventListener('click', openQuestsWindow);
    }
    
    // Ajouter l'√©v√©nement de fermeture
    const closeButton = document.getElementById('close-quests-modal');
    if (closeButton) {
        closeButton.addEventListener('click', closeQuestsWindow);
    }
    
    // Ajouter les √©v√©nements des onglets
    const tabs = document.querySelectorAll('.quest-tab');
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            switchQuestTab(tab.dataset.tab);
        });
    });
    
    // Fermer en cliquant en dehors
    const modal = document.getElementById('quests-main-modal');
    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeQuestsWindow();
            }
        });
    }
}

// Ouvrir la fen√™tre des qu√™tes
function openQuestsWindow() {
    const modal = document.getElementById('quests-main-modal');
    if (modal) {
        modal.style.display = 'flex';
        refreshQuestsDisplay();
    }
}

// Fermer la fen√™tre des qu√™tes
function closeQuestsWindow() {
    const modal = document.getElementById('quests-main-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// Changer d'onglet
function switchQuestTab(tabName) {
    currentQuestTab = tabName;
    
    // Mettre √† jour les onglets actifs
    const tabs = document.querySelectorAll('.quest-tab');
    tabs.forEach(tab => {
        tab.classList.remove('active');
        if (tab.dataset.tab === tabName) {
            tab.classList.add('active');
        }
    });
    
    // Rafra√Æchir l'affichage
    refreshQuestsDisplay();
}

// Rafra√Æchir l'affichage des qu√™tes
function refreshQuestsDisplay() {
    updateQuestCounts();
    renderQuestsList();
}

// Rafra√Æchir l'affichage quand le joueur se d√©place ou change de carte
function refreshQuestsOnPlayerMove() {
    // V√©rifier si la fen√™tre des qu√™tes est ouverte
    const questsModal = document.getElementById('quests-main-modal');
    if (questsModal && questsModal.style.display === 'flex') {
        refreshQuestsDisplay();
    }
}

// Mettre √† jour les compteurs d'onglets
function updateQuestCounts() {
    const questsArray = Object.values(getCurrentQuests());
    
    const counts = {
        all: questsArray.filter(q => q.accepted).length,
        available: questsArray.filter(q => isQuestAvailable(q.id)).length,
        active: questsArray.filter(q => q.accepted && !q.completed).length,
        completed: questsArray.filter(q => q.completed).length
    };
    
    // Mettre √† jour les compteurs
    Object.keys(counts).forEach(key => {
        const countElement = document.getElementById(`count-${key}`);
        if (countElement) {
            countElement.textContent = counts[key];
        }
    });
}

// Rendre la liste des qu√™tes
function renderQuestsList() {
    const questsList = document.getElementById('quests-list');
    if (!questsList) return;
    
    questsList.innerHTML = '';
    
    const questsArray = Object.values(getCurrentQuests());
    let filteredQuests = questsArray;
    
    // Filtrer selon l'onglet actif
    switch (currentQuestTab) {
        case 'available':
            filteredQuests = questsArray.filter(q => isQuestAvailable(q.id));
            break;
        case 'active':
            filteredQuests = questsArray.filter(q => q.accepted && !q.completed);
            break;
        case 'completed':
            filteredQuests = questsArray.filter(q => q.completed);
            break;
        case 'all':
            filteredQuests = questsArray.filter(q => q.accepted);
            break;
    }
    
    if (filteredQuests.length === 0) {
        const emptyMessage = document.createElement('div');
        emptyMessage.className = 'quests-empty';
        emptyMessage.textContent = getEmptyMessage();
        questsList.appendChild(emptyMessage);
        return;
    }
    
    filteredQuests.forEach(quest => {
        const questCard = createQuestCard(quest);
        questsList.appendChild(questCard);
    });
}

// Obtenir le message quand aucune qu√™te
function getEmptyMessage() {
    switch (currentQuestTab) {
        case 'available':
            return 'Aucune qu√™te disponible ici. Rapprochez-vous des PNJ sur la carte pour d√©couvrir de nouvelles qu√™tes !';
        case 'active':
            return 'Aucune qu√™te en cours. Acceptez une qu√™te pour commencer votre aventure !';
        case 'completed':
            return 'Aucune qu√™te termin√©e. Compl√©tez vos premi√®res qu√™tes pour voir votre progression !';
        case 'all':
            return 'Aucune qu√™te accept√©e. Acceptez des qu√™tes depuis l\'onglet "Disponibles" pour les voir ici !';
        default:
            return 'Aucune qu√™te trouv√©e. Explorez le monde pour d√©couvrir des aventures !';
    }
}

// Cr√©er une carte de qu√™te
function createQuestCard(quest) {
    const card = document.createElement('div');
    card.className = `quest-card ${getQuestCardClass(quest)}`;
    
    const status = getQuestStatus(quest);
    const progressPercent = quest.target > 0 ? (quest.current / quest.target) * 100 : 0;
    
    card.innerHTML = `
        <div class="quest-card-header">
            <div>
                <div class="quest-card-title">${quest.name}</div>
            </div>
            <div class="quest-card-status">
                <span class="quest-status-badge ${status.class}">${status.text}</span>
            </div>
        </div>
        
        <div class="quest-card-description">${quest.description}</div>
        
        ${quest.accepted ? `
        <div class="quest-progress">
            <div class="quest-progress-bar">
                <div class="quest-progress-fill" style="width: ${progressPercent}%"></div>
            </div>
            <div class="quest-progress-text">${quest.current} / ${quest.target}</div>
        </div>
        ` : ''}
        
        ${quest.requiredItems ? `
        <div class="quest-required-items">
            <div class="quest-required-title">Objets requis:</div>
            <div class="quest-required-list">
                ${quest.requiredItems.map(item => `
                    <div class="quest-required-item">
                        <img src="${getQuestItemImagePath(item.id)}" 
                             alt="${item.name}" 
                             style="width: 24px; height: 24px; margin-right: 8px; vertical-align: middle;"
                             onerror="this.style.display='none'">
                        <span>${item.quantity}x ${item.name}</span>
                    </div>
                `).join('')}
            </div>
        </div>
        ` : ''}
        
        <div class="quest-rewards">
            <div class="quest-rewards-title">R√©compenses</div>
            <div class="quest-rewards-list">
                ${Object.entries(quest.reward).map(([type, amount]) => {
                    if (type === 'items') {
                        return amount.map(item => `
                            <div class="quest-reward-item">
                                <img src="assets/objets/${item.id.replace('_', 'de')}.png" alt="${item.name}" style="width: 24px; height: 24px; margin-right: 8px; vertical-align: middle;">
                                <span>${item.quantity}x ${item.name}</span>
                            </div>
                        `).join('');
                    } else {
                        return `
                            <div class="quest-reward-item">
                                ${getRewardIcon(type)} ${amount} ${getRewardLabel(type)}
                            </div>
                        `;
                    }
                }).join('')}
            </div>
        </div>
        
        <div class="quest-actions">
            ${getQuestActions(quest)}
        </div>
    `;
    
    return card;
}

// Obtenir la classe CSS de la carte selon l'√©tat de la qu√™te
function getQuestCardClass(quest) {
    if (quest.completed) return 'completed';
    if (quest.accepted) return 'active';
    return '';
}

// Obtenir le statut de la qu√™te
function getQuestStatus(quest) {
    if (quest.completed) {
        return { text: 'Termin√©e', class: 'completed' };
    }
    if (quest.accepted && quest.readyToComplete) {
        return { text: '√Ä valider', class: 'ready' };
    }
    if (quest.accepted) {
        return { text: 'En cours', class: 'active' };
    }
    return { text: 'Disponible', class: 'available' };
}

// Obtenir les actions disponibles pour une qu√™te
function getQuestActions(quest) {
    if (quest.completed) {
        return `<button class="quest-action-btn complete" disabled>Termin√©e</button>`;
    }
    
    if (quest.accepted) {
        if (quest.readyToComplete) {
            const validationMap = quest.validationOn ? quest.validationOn.map : 2;
            return `
                <button class="quest-action-btn abandon" onclick="abandonQuest('${quest.id}')">Abandonner</button>
                <button class="quest-action-btn validate" disabled>Va voir Papi sur la map ${validationMap}</button>
            `;
        } else {
            return `
                <button class="quest-action-btn abandon" onclick="abandonQuest('${quest.id}')">Abandonner</button>
                <button class="quest-action-btn complete" disabled>
                    En cours... (${quest.current}/${quest.target})
                </button>
            `;
        }
    }
    
    // Si on est dans l'onglet "Toutes", ne pas afficher le bouton d'acceptation
    if (currentQuestTab === 'all') {
        return `<button class="quest-action-btn accept" disabled>Non disponible</button>`;
    }
    
    return `<button class="quest-action-btn accept" onclick="acceptQuest('${quest.id}')">Accepter</button>`;
}

// Obtenir l'ic√¥ne d'une r√©compense
function getRewardIcon(type) {
    const icons = {
        xp: '‚≠ê',
        pecka: 'üí∞',
        item: 'üéÅ',
        equipment: '‚öîÔ∏è'
    };
    return icons[type] || 'üéÅ';
}

// Obtenir le label d'une r√©compense
function getRewardLabel(type) {
    const labels = {
        xp: 'XP',
        pecka: 'Pecka',
        item: 'Objet',
        equipment: '√âquipement'
    };
    return labels[type] || 'R√©compense';
}

// Exports globaux
window.showQuestOffer = showQuestOffer;
window.showCraftQuestOffer = showCraftQuestOffer;
window.showSlimeBossQuestOffer = showSlimeBossQuestOffer;
window.showSlimeBossFinalQuestOffer = showSlimeBossFinalQuestOffer;
window.initQuestsWindow = initQuestsWindow;
window.openQuestsWindow = openQuestsWindow;
window.closeQuestsWindow = closeQuestsWindow;
window.switchQuestTab = switchQuestTab;
window.refreshQuestsDisplay = refreshQuestsDisplay;
window.refreshQuestsOnPlayerMove = refreshQuestsOnPlayerMove;
window.updateQuestCounts = updateQuestCounts;
window.renderQuestsList = renderQuestsList;
window.getEmptyMessage = getEmptyMessage;
window.createQuestCard = createQuestCard;
window.getQuestCardClass = getQuestCardClass;
window.getQuestStatus = getQuestStatus;
window.getQuestActions = getQuestActions;
window.getRewardIcon = getRewardIcon;
window.getRewardLabel = getRewardLabel; 