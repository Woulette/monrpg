// Gestionnaire des noms de personnages pour le multijoueur
// R√©cup√®re le nom du personnage depuis le syst√®me de sauvegarde

class PlayerNameManager {
    constructor() {
        this.currentPlayerName = null;
        this.currentCharacterId = null;
    }
    
    // R√©cup√©rer le nom du personnage actuel
    getCurrentPlayerName() {
        try {
            // R√©cup√©rer l'ID du personnage actuel
            const currentCharacterId = this.getCurrentCharacterId();
            if (!currentCharacterId) {
                console.log('‚ùå Aucun personnage s√©lectionn√©');
                return null;
            }
            
            // R√©cup√©rer les donn√©es du personnage depuis le localStorage
            const characterData = this.getCharacterData(currentCharacterId);
            if (characterData && characterData.name && characterData.name.trim() !== '') {
                console.log(`‚úÖ Nom du personnage r√©cup√©r√©: ${characterData.name}`);
                return characterData.name.trim();
            } else {
                console.log('‚ùå Nom du personnage non trouv√© ou vide');
                return null;
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration du nom:', error);
            return null;
        }
    }
    
    // R√©cup√©rer l'ID du personnage actuel
    getCurrentCharacterId() {
        try {
            // V√©rifier si un personnage est s√©lectionn√©
            if (window.currentCharacterId) {
                // Sauvegarder l'ID dans localStorage pour la prochaine fois
                localStorage.setItem('currentCharacterId', window.currentCharacterId);
                console.log(`üíæ ID du personnage sauvegard√©: ${window.currentCharacterId}`);
                return window.currentCharacterId;
            }
            
            // Essayer de r√©cup√©rer depuis le localStorage
            const savedCharacterId = localStorage.getItem('currentCharacterId');
            if (savedCharacterId) {
                return savedCharacterId;
            }
            
            return null;
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'ID du personnage:', error);
            return null;
        }
    }
    
    // R√©cup√©rer les donn√©es d'un personnage
    getCharacterData(characterId) {
        try {
            // Utiliser le syst√®me de sauvegarde existant du jeu
            const characterSlotsData = localStorage.getItem('monrpg_character_slots');
            
            if (characterSlotsData) {
                const characterSlots = JSON.parse(characterSlotsData);
                
                // Chercher le personnage par son ID dans les slots
                for (let i = 0; i < characterSlots.length; i++) {
                    const character = characterSlots[i];
                    if (character && character.id == characterId) {
                        console.log(`üìÇ Donn√©es du personnage ${characterId}:`, character);
                        return character;
                    }
                }
                
                console.log(`‚ùå Personnage ${characterId} non trouv√© dans les slots`);
                return null;
            }
            
            console.log(`‚ùå Aucun slot de personnage trouv√© dans localStorage`);
            return null;
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es du personnage:', error);
            return null;
        }
    }
    
    // Mettre √† jour le nom du personnage
    updatePlayerName() {
        this.currentPlayerName = this.getCurrentPlayerName();
        this.currentCharacterId = this.getCurrentCharacterId();
        
        console.log(`üîÑ Nom du personnage mis √† jour: ${this.currentPlayerName} (ID: ${this.currentCharacterId})`);
        
        return this.currentPlayerName;
    }
    
    // Obtenir le nom actuel
    getPlayerName() {
        if (!this.currentPlayerName) {
            this.updatePlayerName();
        }
        
        // Si on n'a pas de nom valide, retourner null
        if (!this.currentPlayerName || this.currentPlayerName.startsWith('Joueur_')) {
            return null;
        }
        
        return this.currentPlayerName;
    }
    
    // Fonction de diagnostic pour voir ce qui est dans localStorage
    diagnoseStorage() {
        console.log('üîç Diagnostic du localStorage:');
        
        // Afficher toutes les cl√©s du localStorage
        console.log('üìã Toutes les cl√©s du localStorage:');
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            console.log(`  - ${key}: ${localStorage.getItem(key)}`);
        }
        
        console.log('\nüë§ Personnages trouv√©s:');
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('character_')) {
                try {
                    const data = JSON.parse(localStorage.getItem(key));
                    console.log(`  - ${key}:`, data);
                } catch (e) {
                    console.log(`  - ${key}: [Erreur parsing]`);
                }
            }
        }
        
        // Afficher l'ID du personnage actuel
        console.log(`\nüéØ ID du personnage actuel:`);
        console.log(`  - currentCharacterId: ${localStorage.getItem('currentCharacterId')}`);
        console.log(`  - window.currentCharacterId: ${window.currentCharacterId}`);
    }
}

// Cr√©er l'instance globale
window.playerNameManager = new PlayerNameManager();

console.log('üìù Gestionnaire de noms de personnages charg√©'); 